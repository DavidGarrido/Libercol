models:
  Company:
    name: string
    color: string
    relationships:
      hasMany: Fiscal, Point, Client
  Industry:
    name: string
    relationships:
      hasMany: Fiscal
  Fiscal:
    industry_id: id
    company_id: id
  Tax:
    name: string
    percent: integer nullable
    value: bigInteger nullable
    relationships:
      belongsToMany: Fiscal
  Contact:
    tel: bigInteger nullable
    cel_one: bigInteger nullable
    cel_two: bigInteger nullable
    whatsapp: bigInteger nullable
    telegram: bigInteger nullable
    facebook: string nullable
    instagram: string nullable
    twitter: string nullable
    linkedin: string nullable
    email: string nullable
    web: string nullable
    address_id: id nullable
    modeltable_type: string
    modeltable_id: unsignedBigInteger
  Address:
    description_id: string
    municipality_id: id
    relationships:
      hasMany: Contact
  File:
    format: enum:image,doc,pdf,url
    type: enum:transaccion,perfil,producto,rut,cedula,camara,ref_comercial,ref_personal,ref_bancaria,cer_libertad,balance,tarjeta_profesional,extecto,nit
    route: string
    comment: text nullable
    modeltable_type: string
    modeltable_id: unsignedBigInteger
  Point:
    company_id: id
    type: enum:oficina,bodega,almacen,principal
    comment: nullable
    relationships:
      hasMany: Inventary, Ticket
  Inventary:
    point_id: id
    asset_id: id
  Ticket:
# Vendor_id y Creator_id hacen relacion a la tabla usuarios y tomaremos informacion ....
    total: bigInteger
    utc: bigInteger
    point_id: id
    creator_id: id foreign:users
    vendor_id: id foreign:users
    relationships:
      hasMany: Extra
  Asset:
    name: string
    description: text
    creator_id: id foreign:users
    valoration: bigInteger
    relationships:
      hasMany: Inventary, Feature
      belongsToMany: Category
  Listsale:
    feature_id: id
    value: bigInteger
    state: enum:activo,inactivo
    utc_start: bigInteger nullable
    utc_end: bigInteger nullable
    relationships:
      hasMany: Product
  Feature:
    reference: string nullable
    weight: decimal:10,1 nullable
    size: string nullable
    width: integer nullable
    height: integer nullable
    texture: string nullable
    units: default:1
    max: integer nullable
    min: integer default:1
    asset_id: id
    color_id: id
    material_id: id
    relationships:
      hasMany: Listsale
  Color:
# Name: Para diferenciar los distintos colores
# Type: Para saber el formato que tendra
# Code: El valor del codigo
# Feature:
    name: string nullable
    type: enum:rgba,rgb,hex
    code: string nullable
    relationships:
      hasMany: Feature
  Material:
# Slug: es para poder tener URLÂ´s amigalbes y luego poder filtrar 
    name: string
    slug: string
    relationships:
      hasMany: Feature
  Product:
# Name: tener el nombre del Asset en el momento de la venta
# Feacture: tomamos las caractiristicas del Asset y las imprimimos en la factura
    name: string
    feature: text
    units: integer
    listsale_id: id
  Extra:
    concept: string
    value: integer nullable
    percent: integer nullable
    type: enum:inc,dec
    ticket_id: id
  Wallet:
    modeltable_type: string
    modeltable_id: unsignedBigInteger
    wallettype_id: id
    relationships:
      hasMany: Walletmoviment
  Wallettype:
    type: enum:efectivo,ahorros,daviplata,nequi,movi,ticket,credito
    bank_id: id nullable
    limit: bigInteger nullable
    relationships:
      hasMany: Wallet
  Walletmoviment:
    value: bigInteger
    interest: bigInteger
    utc_start: bigInteger nullable
    utc_end: bigInteger nullable
    type: enum:inc,dec
    state: enum:aprobado,desaprobado
    wallet_id: id
  Bank:
    name: string
  Userdata:
    stature: integer nullable
    weight: integer nullable
    size: string
    gender: enum:masculino,femenino
    type_document: enum:cc,ce,ti,rc,pp nullable
    number_document: bigInteger nullable
    modeltable_type: string nullable
    modeltable_id: unsignedBigInteger nullable 
  Client:
    name: string
    company_id: id
    relationships:
      hasMany: Score
  Score:
# Sales sera el total de compras que realizo el cliente.
# Profit sera el total de dinero que ingreso a la empresa por ese cliente.
# Stars sera la calidad del cliente.
# Client_id es la relacion de Score y Cliente.
    sales: unsignedInteger
    profit: unsignedBigInteger
    starts: unsignedInteger
    client_id: id
  Municipality:
# Departament_id: Una municipalidad ???? departamentos
# Address: Para relacionarlo con las direccioens
    name: string
    departament_id: id
    relationships:
      hasMany: Address
# Name: El nombre de los departamentos que existen
  Departament:
    name: string
  Category:
    name: string
    slug: string
    relationships:
      belongsToMany: Asset
controllers:
  Company:
    resource
  Point:
    resource
  Inventary:
    resource
  Ticket:
    resource
  Asset:
    resource
  Wallet:
    resource
  Color:
    resource
  Material:
    resource
  Client:
    resource
  Municipality:
    resource
  Departament:
    resource
  Category:
    resource
seeders: Company, Industry, Fiscal, Tax, Contact, Address, File, Point, Inventary, Ticket, Asset, Listsale, Feature, Color, Material, Product, Extra, Wallet, Wallettype, Walletmoviment, Bank, Userdata, Client, Score, Municipality, Departament, Category